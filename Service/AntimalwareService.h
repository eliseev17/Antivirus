#pragma once
#include <windows.h>
#include "Service.h"
#include "IPC.h"
#include "Scanner.h"
#include "ScheduledScanner.h"
#include "InformationStorage.h"
#include "Monitoring.h"
#include <thread>
#include "FilesWorker.h"
#include "InformationStorage.h"

#define BUFSIZE 2048
#define PIPE_BUFSIZE 1024

namespace Antimalware::ServiceApp
{
    class AntimalwareService : public ServiceLib::ServiceManagement::Service
    {
    public:
        AntimalwareService()
            : ServiceLib::ServiceManagement::Service(u"AntimalwareService")
        { }
        int clientMessagesProcessing();
        void processingMessage(message newMessage);
        void listenPipe();
    private:
        InformationStorage infoStorage;
        // Флаг, показывающий, есть ли соединение
        BOOL   fConnected = FALSE;
        // Обьявление канала и потока
        HANDLE pipeClientToService = INVALID_HANDLE_VALUE, pipeServiceToClient = NULL;
        // Имя канала
        LPCTSTR firstPipeName = TEXT("\\\\.\\pipe\\firstPipe");
        LPCTSTR secondPipeName = TEXT("\\\\.\\pipe\\secondPipe");
    protected:
        virtual int Init() override;
        virtual void DoWork() override;
        virtual int DoStop() override;

    };

    class AntimalwareServiceFactory : public ServiceLib::ServiceManagement::IServiceFactory
    {
    public:
        AntimalwareServiceFactory();

        virtual std::unique_ptr<ServiceLib::ServiceManagement::Service> Create() override;

    private:
    };
}
